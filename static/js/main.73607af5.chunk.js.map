{"version":3,"sources":["tone.mp3","end.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","tone","UIfx","toneAudio","volume","throttleMs","end","endAudio","App","props","startTimer","timer","setInterval","countDown","resetTimer","clearInterval","setState","seconds","state","play","duration","Grid","centered","columns","style","marginTop","Card","Content","header","extra","Statistic","horizontal","textAlign","Value","this","Label","className","Button","color","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,kQCMrCC,EAAO,IAAIC,IACfC,IACA,CACEC,OAAQ,GACRC,WAAY,MAIVC,EAAM,IAAIJ,IACdK,IACA,CACEH,OAAQ,GACRC,WAAY,MAyDDG,E,YApDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAKRC,WAAa,WACX,EAAKC,MAAQC,YAAY,EAAKC,UAAW,MAPxB,EAUnBC,WAAa,WACXC,cAAc,EAAKJ,OACnB,EAAKK,SAAS,CAACC,QAAS,KAZP,EAenBJ,UAAY,WACV,IAAII,EAAU,EAAKC,MAAMD,QAAU,EACrB,GAAXA,GACDA,EAAW,EACXX,EAAIa,QACKF,EAAU,GACnBhB,EAAKkB,OAGP,EAAKH,SAAS,CAACC,aAtBf,EAAKC,MAAQ,CAACD,QAAS,EAAGG,SAAU,GACpC,EAAKT,MAAQ,EAHI,E,sEA4BjB,OACE,kBAACU,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAS,GACtB,yBAAKC,MAAO,CAACC,UAAU,UACrB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,QAAN,CAAcC,OAAO,4EACrB,kBAACF,EAAA,EAAKC,QAAN,CAAcE,OAAK,GACjB,kBAACC,EAAA,EAAD,CAAWC,YAAU,EAACP,MAAO,CAACQ,UAAU,WACvC,kBAACF,EAAA,EAAUG,MAAX,KAAkBC,KAAKhB,MAAMD,SAC7B,kBAACa,EAAA,EAAUK,MAAX,kBAGH,kBAACT,EAAA,EAAKC,QAAN,KACE,yBAAKS,UAAU,kBACf,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,QAASL,KAAKxB,YAApC,SACA,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,MAAMC,QAASL,KAAKpB,YAAlC,iB,GA3CI0B,IAAMC,WCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.73607af5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tone.ff3ed4e6.mp3\";","module.exports = __webpack_public_path__ + \"static/media/end.485c1f6c.mp3\";","import React from 'react';\nimport { Button, Card, Statistic, Grid } from 'semantic-ui-react'\nimport UIfx from 'uifx'\nimport toneAudio from \"./tone.mp3\"\nimport endAudio from \"./end.mp3\"\n\nconst tone = new UIfx(\n  toneAudio,\n  {\n    volume: 0.5, // number between 0.0 ~ 1.0\n    throttleMs: 100\n  }\n)\n\nconst end = new UIfx(\n  endAudio,\n  {\n    volume: 0.5, // number between 0.0 ~ 1.0\n    throttleMs: 100\n  }\n)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {seconds: 5, duration: 5}\n    this.timer = 0\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(this.countDown, 1000)\n  }\n\n  resetTimer = () => {\n    clearInterval(this.timer)\n    this.setState({seconds: 5})\n  }\n\n  countDown = () => {\n    let seconds = this.state.seconds - 1;\n    if(seconds == 0) {\n      seconds =  5\n      end.play()\n    } else if (seconds < 4) {\n      tone.play()\n    }\n\n    this.setState({seconds})\n  }\n\n  render() {\n    return (\n      <Grid centered columns={1}>\n        <div style={{marginTop:\"100px\"}}>\n          <Card>\n            <Card.Content header=\"Speed Pool is the second coming and only cowards won't acknowledge that\" />\n            <Card.Content extra>\n              <Statistic horizontal style={{textAlign:\"center\"}}>\n               <Statistic.Value>{this.state.seconds}</Statistic.Value>\n               <Statistic.Label>Seconds</Statistic.Label>\n             </Statistic>\n            </Card.Content>\n            <Card.Content>\n              <div className='ui two buttons'>\n              <Button color=\"green\" onClick={this.startTimer}>Start</Button>\n              <Button color=\"red\" onClick={this.resetTimer}>Stop</Button>\n              </div>\n            </Card.Content>\n          </Card>\n        </div>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}